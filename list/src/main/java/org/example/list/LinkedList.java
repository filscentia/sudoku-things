/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.list;

public class LinkedList<T extends ListElement> {
    private ListNode<T> head;

    public void add(T element) {
        var newNode = new ListNode<T>(element);

        var it = tail(head);
        if (it == null) {
            head = newNode;
        } else {
            it.next = newNode;
        }
    }

    private ListNode<T> tail(ListNode<T> head) {
        ListNode<T> it;

        for (it = head; it != null && it.next != null; it = it.next) {}

        return it;
    }

    public boolean remove(ListElement element) {
        boolean result = false;
        ListNode<T> previousIt = null;
        ListNode<T> it = null;
        for (it = head; !result && it != null; previousIt = it, it = it.next) {
            if (0 == element.compareTo(it.getData())) {
                result = true;
                unlink(previousIt, it);
                break;
            }
        }

        return result;
    }

    private void unlink(ListNode<T> previousIt, ListNode<T> currentIt) {
        if (currentIt == head) {
            head = currentIt.next;
        } else {
            previousIt.next = currentIt.next;
        }
    }

    public int size() {
        int size = 0;

        for (ListNode<T> it = head; it != null; ++size, it = it.next) {}

        return size;
    }

    public T get(int index) {
        ListNode<T> it = head;
        while (index > 0 && it != null) {
            it = it.next;
            index--;
        }

        if (it == null) {
            throw new IndexOutOfBoundsException("Index is out of range");
        }

        return it.getData();
    }


}
